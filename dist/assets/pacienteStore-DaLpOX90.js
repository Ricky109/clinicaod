import{C as c,u as n}from"./index-Bp0xLay2.js";import{v as E}from"./pagoService-DPhzBUMq.js";const N="https://transacciones.ucsm.edu.pe/MSERP/MsAplicativos",C={async post(o){const r=await fetch(N,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!r.ok)throw new Error("Error de conexión con el servidor");const t=await r.json();if(t.ERROR)throw new Error(t.ERROR);return t}},O=async o=>{const r={ID:"COD1010",CNRODNI:o.CNRODNI,CUSUCOD:o.CUSUCOD||"U666"};return await C.post(r)},R=async o=>{const r={ID:"COD1011",CNRODNI:o.CNRODNI,CUSUCOD:o.CUSUCOD||"U666",CAPEPAT:o.CAPEPAT,CAPEMAT:o.CAPEMAT,CNOMBRE:o.CNOMBRE,CSEXO:o.CSEXO,DNACIMI:o.DNACIMI,CNUEVO:"S",CNROCEL:o.CNROCEL,CDNIEST:o.CDNIEST};return await C.post(r)},i={buscar:O,registrar:R},A="https://transacciones.ucsm.edu.pe/MSERP/MsAplicativos",h={async post(o){const r=await fetch(A,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!r.ok)throw new Error("Error de conexión con el servidor");const t=await r.json();if(t.ERROR)throw new Error(t.ERROR);return t}},D=async(o,r,t)=>{const e={ID:"API0007",CDNIALU:r,CUSUCOD:t||"U666",CPARAM:o};try{return(await h.post(e)).map(a=>({CCODART:a.CIDCATE,CDESCRI:a.CDESCRI,NPRECIO:a.NPRECIO}))}catch(s){throw console.error("Error buscando tratamientos:",s),s}},I="https://transacciones.ucsm.edu.pe/MSERP/MsAplicativos",u={async post(o){const r=await fetch(I,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(o)});if(!r.ok)throw new Error("Error de conexión con el servidor");const t=await r.json();if(t.ERROR)throw new Error(t.ERROR);return t}},T=async o=>{const r={ID:"COD1020",CNRODNI:o.CNRODNI,AIDCATE:o.DATOS.map(t=>t.CCODART),CDNIALU:o.CDNIALU};return console.log("Enviando a API COD1020:",r),await u.post(r)},l=c("paciente",{state:()=>({paciente:null,nuevo:!1,tratamientos:[],nroPago:null,montoTotal:0,estadoPago:"PENDIENTE",filtros:{dni:"",nombre:""}}),actions:{async buscarPaciente(o){var e;const r=n(),t=await i.buscar({CNRODNI:o,CUSUCOD:(e=r.user)==null?void 0:e.CUSUCOD});if(t.ERROR)throw new Error(t.ERROR);return t.CNUEVO==="S"?(this.nuevo=!0,this.paciente={CNRODNI:o,CAPEPAT:"",CAPEMAT:"",CNOMBRE:"",CNROCEL:"",CSEXO:"M",DNACIMI:"",CDNIEST:""}):(this.nuevo=!1,this.paciente={CNRODNI:t.CNRODNI,CAPEPAT:t.CAPEPAT||"",CAPEMAT:t.CAPEMAT||"",CNOMBRE:t.CNOMBRE||"",CNROCEL:t.CNROCEL||"",CSEXO:t.CSEXO||"",DNACIMI:t.DNACIMI||"",CDNIEST:t.CDNIEST||""}),t},async registrarPaciente(o){var e;const r=n(),t=await i.registrar({...o,CUSUCOD:(e=r.user)==null?void 0:e.CUSUCOD});if(t.ERROR)throw new Error(t.ERROR);return this.nuevo=!1,t},async buscarTratamientosStore(o,r){var t;try{const e=n();return await D(o,r,(t=e.user)==null?void 0:t.CUSUCOD)}catch(e){throw console.error("Error buscando tratamientos:",e),e}},agregarTratamiento(o){const r=this.tratamientos.find(t=>t.CCODART===o.CCODART);r?r.NCANTID+=1:this.tratamientos.push({...o,NCANTID:1}),this.actualizarMontoTotal()},actualizarMontoTotal(){this.montoTotal=this.tratamientos.reduce((o,r)=>o+r.NPRECIO*r.NCANTID,0)},actualizarCantidad(o,r){const t=this.tratamientos.find(e=>e.CCODART===o);t&&(t.NCANTID=Math.max(1,Number(r)||1)),this.montoTotal=this.tratamientos.reduce((e,s)=>e+s.NPRECIO*s.NCANTID,0)},quitarTratamiento(o){this.tratamientos=this.tratamientos.filter(r=>r.CCODART!==o),this.montoTotal=this.tratamientos.reduce((r,t)=>r+t.NPRECIO*t.NCANTID,0)},async grabarConsumo(){const o=n();if(!this.paciente)throw new Error("Paciente no definido");if(this.tratamientos.length===0)throw new Error("Seleccione al menos un tratamiento");const r={CNRODNI:this.paciente.CNRODNI,CDNIALU:o.user.CDNIEST,DATOS:this.tratamientos.map(e=>({CCODART:e.CCODART,NCANTID:e.NCANTID,NPRECIO:e.NPRECIO}))};console.log("Grabando consumo con payload:",r);const t=await T(r);if(t.ERROR)throw new Error(t.ERROR);return this.nroPago=t.CNROPAG,this.montoTotal=t.NMONTO,this.estadoPago=t.ESTADO||"PENDIENTE",console.log("Pago generado:",{nroPago:this.nroPago,monto:this.montoTotal,estado:this.estadoPago}),t},async verificarPago(){if(!this.nroPago)throw new Error("No hay pago a verificar");const o=await E({CNROPAG:this.nroPago});if(o.ESTADO)switch(o.ESTADO){case"C":this.estadoPago="PAGADO";break;case"A":this.estadoPago="PENDIENTE";break;case"X":this.estadoPago="ANULADO";break;case"F":this.estadoPago="FACTURADO";break;default:this.estadoPago="PENDIENTE"}return o}}});export{l as u};
