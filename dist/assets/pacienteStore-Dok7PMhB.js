import{B as N,u as a}from"./index-ByBmmahU.js";import{v as O}from"./pagoService-BvGXah5e.js";const E="https://transacciones.ucsm.edu.pe/MSERP/MsAplicativos",c={async post(r){const o=await fetch(E,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!o.ok)throw new Error("Error de conexión con el servidor");const t=await o.json();if(t.ERROR)throw new Error(t.ERROR);return t}},R=async r=>{const o={ID:"COD1010",CNRODNI:r.CNRODNI,CUSUCOD:r.CUSUCOD||"U666"};return await c.post(o)},h=async r=>{const o={ID:"COD1011",CNRODNI:r.CNRODNI,CUSUCOD:r.CUSUCOD||"U666",CAPEPAT:r.CAPEPAT,CAPEMAT:r.CAPEMAT,CNOMBRE:r.CNOMBRE,CSEXO:r.CSEXO,DNACIMI:r.DNACIMI,CNUEVO:"S",CNROCEL:r.CNROCEL,CDNIEST:r.CDNIEST};return await c.post(o)},C={buscar:R,registrar:h},A="https://transacciones.ucsm.edu.pe/MSERP/MsAplicativos",D={async post(r){const o=await fetch(A,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify(r)});if(!o.ok)throw new Error("Error de conexión con el servidor");const t=await o.json();if(t.ERROR)throw new Error(t.ERROR);return t}},u=async(r,o)=>{const t={ID:"API0007",CDNIALU:o,CUSUCOD:"U666",CPARAM:r};try{return(await D.post(t)).map(s=>({CCODART:s.CIDCATE,CDESCRI:s.CDESCRI,NPRECIO:s.NPRECIO}))}catch(e){throw console.error("Error buscando tratamientos:",e),e}},I={async post(r){}},T=async r=>{const o={ID:"COD1020",CNRODNI:r.CNRODNI,AIDCATE:r.DATOS.map(t=>t.CCODART),CDNIALU:r.CUSUCOD};return await I.post(o)},d=N("paciente",{state:()=>({paciente:null,nuevo:!1,tratamientos:[],nroPago:null,montoTotal:0,estadoPago:"PENDIENTE"}),actions:{async buscarPaciente(r){var e;const o=a(),t=await C.buscar({CNRODNI:r,CUSUCOD:(e=o.user)==null?void 0:e.CUSUCOD});if(t.ERROR)throw new Error(t.ERROR);return t.CNUEVO==="S"?(this.nuevo=!0,this.paciente={CNRODNI:r,CAPEPAT:"",CAPEMAT:"",CNOMBRE:"",CNROCEL:"",CSEXO:"M",DNACIMI:"",CDNIEST:""}):(this.nuevo=!1,this.paciente={CNRODNI:t.CNRODNI,CAPEPAT:t.CAPEPAT||"",CAPEMAT:t.CAPEMAT||"",CNOMBRE:t.CNOMBRE||"",CNROCEL:t.CNROCEL||"",CSEXO:t.CSEXO||"M",DNACIMI:t.DNACIMI||"",CDNIEST:t.CDNIEST||""}),t},async registrarPaciente(r){var e;const o=a(),t=await C.registrar({...r,CUSUCOD:(e=o.user)==null?void 0:e.CUSUCOD});if(t.ERROR)throw new Error(t.ERROR);return this.nuevo=!1,t},async buscarTratamientosStore(r,o){try{return await u(r,o)}catch(t){throw console.error("Error buscando tratamientos:",t),t}},agregarTratamiento(r){const o=this.tratamientos.find(t=>t.CCODART===r.CCODART);o?o.NCANTID+=1:this.tratamientos.push({...r,NCANTID:1}),this.actualizarMontoTotal()},async cargarTratamientoPorCodigo(r){const o=a();try{const e=(await this.buscarTratamientosStore(r,o.user.CNRODNI)).find(n=>n.CCODART===r);if(!e)throw new Error("Tratamiento no encontrado");const s=this.tratamientos.findIndex(n=>n.CCODART===e.CCODART);return s>=0?this.tratamientos[s].NCANTID+=1:this.tratamientos.push({...e,NCANTID:1}),this.montoTotal=this.tratamientos.reduce((n,i)=>n+i.NPRECIO*i.NCANTID,0),e}catch(t){throw console.error("Error cargando tratamiento:",t),new Error(t.message||"Error al cargar el tratamiento")}},actualizarMontoTotal(){this.montoTotal=this.tratamientos.reduce((r,o)=>r+o.NPRECIO*o.NCANTID,0)},actualizarCantidad(r,o){const t=this.tratamientos.find(e=>e.CCODART===r);t&&(t.NCANTID=Math.max(1,Number(o)||1)),this.montoTotal=this.tratamientos.reduce((e,s)=>e+s.NPRECIO*s.NCANTID,0)},quitarTratamiento(r){this.tratamientos=this.tratamientos.filter(o=>o.CCODART!==r),this.montoTotal=this.tratamientos.reduce((o,t)=>o+t.NPRECIO*t.NCANTID,0)},async grabarConsumo(){var e;const r=a();if(!this.paciente)throw new Error("Paciente no definido");if(this.tratamientos.length===0)throw new Error("Seleccione al menos un tratamiento");const o={CNRODNI:this.paciente.CNRODNI,CUSUCOD:(e=r.user)==null?void 0:e.CUSUCOD,DATOS:this.tratamientos.map(s=>({CCODART:s.CCODART,NCANTID:s.NCANTID,NPRECIO:s.NPRECIO}))},t=await T(o);if(t.ERROR)throw new Error(t.ERROR);return this.nroPago=t.CNROPAG,this.montoTotal=t.NMONTO,this.estadoPago="PENDIENTE",t},async verificarPago(){if(!this.nroPago)throw new Error("No hay pago a verificar");const r=await O({CNROPAG:this.nroPago});return r.OK==="OK"&&(this.estadoPago="PAGADO"),r}}});export{d as u};
