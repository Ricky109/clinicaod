import{z as a,u as C}from"./index-CkARCL_c.js";import{v as E}from"./pagoService-Dg7UhO3v.js";const s=new Map([["75767879",{CNRODNI:"75767879",CNOMBRE:"ROSAS/GUEVARA/VICTOR JOSE",CNROCEL:"951957852"}]]);async function c(t){await R(250);const r=t&&t.CNRODNI?String(t.CNRODNI):"";if(!r)return{ERROR:"DNI NO EXISTE"};if(s.has(r)){const e=s.get(r);return{CNRODNI:e.CNRODNI,CNUEVO:"N",CNOMBRE:e.CNOMBRE,CNROCEL:e.CNROCEL||""}}return r.endsWith("1")?{CNRODNI:r,CNUEVO:"S",CNOMBRE:"",CNROCEL:""}:{CNRODNI:r,CNUEVO:"N",CNOMBRE:"ROSAS/GUEVARA/VICTOR JOSE",CNROCEL:"999888777"}}async function u(t){await R(250);const r=t&&t.CNRODNI?String(t.CNRODNI):"";if(!r)return{ERROR:"DNI NO EXISTE"};let e=t.CNOMBRE;if(!e&&(t.apellido1||t.apellido2||t.nombres)){const o=t.apellido1||"",i=t.apellido2||"",N=t.nombres||"";e=`${o}/${i}/${N}`}if(!e)return{ERROR:"Error en llenado de campos"};const n=t.CNROCEL||t.CELULAR||"";return s.set(r,{CNRODNI:r,CNOMBRE:e,CNROCEL:n}),{OK:"OK"}}function R(t){return new Promise(r=>setTimeout(r,t))}const I=[{CCODART:"710495",CDESCRI:"ENDODONCIA",NPRECIO:1500},{CCODART:"757678",CDESCRI:"AMALGAMA DE ORO",NPRECIO:15},{CCODART:"757671",CDESCRI:"LIMPIEZA DENTAL",NPRECIO:50},{CCODART:"800001",CDESCRI:"ORTODONCIA BÁSICA",NPRECIO:300}];async function h({CCODART:t}){await O(200);const r=I.find(e=>e.CCODART===t);return r||{ERROR:"ERROR 01"}}async function A(t){await O(300);const r=t.DATOS.reduce((n,o)=>n+o.NPRECIO*o.NCANTID,0);return{CNROPAG:Math.floor(Math.random()*9e9).toString().padStart(10,"0"),NMONTO:Number(r.toFixed(2))}}function O(t){return new Promise(r=>setTimeout(r,t))}const T=a("paciente",{state:()=>({paciente:null,nuevo:!1,tratamientos:[],nroPago:null,montoTotal:0,estadoPago:"PENDIENTE"}),actions:{async buscarPaciente(t){var n;const r=C(),e=await c({CNRODNI:t,CUSUCOD:(n=r.user)==null?void 0:n.CUSUCOD});if(e.ERROR)throw new Error(e.ERROR);return e.CNUEVO==="S"?(this.nuevo=!0,this.paciente={CNRODNI:t,CNOMBRE:"",CNROCEL:""}):(this.nuevo=!1,this.paciente={CNRODNI:e.CNRODNI,CNOMBRE:e.CNOMBRE,CNROCEL:e.CNROCEL||""}),e},async registrarPaciente({CNRODNI:t,CNOMBRE:r,CNROCEL:e}){var i;const n=C(),o=await u({CNRODNI:t,CNOMBRE:r,CNROCEL:e,CUSUCOD:(i=n.user)==null?void 0:i.CUSUCOD});if(o.ERROR)throw new Error(o.ERROR);return this.nuevo=!1,o},async cargarTratamientoPorCodigo(t){const r=await h({CCODART:t});if(r.ERROR)throw new Error(r.ERROR);const e=this.tratamientos.findIndex(n=>n.CCODART===r.CCODART);return e>=0?this.tratamientos[e].NCANTID+=1:this.tratamientos.push({...r,NCANTID:1}),this.montoTotal=this.tratamientos.reduce((n,o)=>n+o.NPRECIO*o.NCANTID,0),r},actualizarCantidad(t,r){const e=this.tratamientos.find(n=>n.CCODART===t);e&&(e.NCANTID=Math.max(1,Number(r)||1)),this.montoTotal=this.tratamientos.reduce((n,o)=>n+o.NPRECIO*o.NCANTID,0)},quitarTratamiento(t){this.tratamientos=this.tratamientos.filter(r=>r.CCODART!==t),this.montoTotal=this.tratamientos.reduce((r,e)=>r+e.NPRECIO*e.NCANTID,0)},async grabarConsumo(){var n;const t=C();if(!this.paciente)throw new Error("Paciente no definido");if(this.tratamientos.length===0)throw new Error("Seleccione al menos un tratamiento");const r={CNRODNI:this.paciente.CNRODNI,CUSUCOD:(n=t.user)==null?void 0:n.CUSUCOD,DATOS:this.tratamientos.map(o=>({CCODART:o.CCODART,NCANTID:o.NCANTID,NPRECIO:o.NPRECIO}))},e=await A(r);if(e.ERROR)throw new Error(e.ERROR);return this.nroPago=e.CNROPAG,this.montoTotal=e.NMONTO,this.estadoPago="PENDIENTE",e},async verificarPago(){if(!this.nroPago)throw new Error("No hay pago a verificar");const t=await E({CNROPAG:this.nroPago});return t.OK==="OK"&&(this.estadoPago="PAGADO"),t}}});export{I as t,T as u};
